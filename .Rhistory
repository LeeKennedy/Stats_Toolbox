data <- read.csv("data1.csv", as.is=TRUE)
bb <- dupes(data, c("A"))
install.packages(dts.quality)
setwd("..")
install_github(dts.quality)
library("dts.quality", lib.loc="/Library/Frameworks/R.framework/Versions/3.1/Resources/library")
bb <- dupes(data, c("A"))
bb
ghelp <- function(topic, in_cran=TRUE) {
require(htmltools) # for getting HTML to the viewer
require(rvest)     # for scraping & munging HTML
# github search URL base
base_ext_url <- "https://github.com/search?utf8=%%E2%%9C%%93&q=%s+extension%%3AR"
ext_url <- sprintf(base_ext_url, topic)
# if searching with user:cran (the default) add that to the URL
if (in_cran) ext_url <- paste(ext_url, "+user%3Acran", sep="", collapse="")
# at the time of writing, "rvest" and "xml2" are undergoing some changes, so
# accommodate those of us who are on the bleeding edge of the hadleyverse
# either way, we are just extracting out the results <div> for viewing in
# the viewer pane (it works in plain ol' R, too)
if (packageVersion("rvest") < "0.2.0.9000") {
require(XML)
pg <- html(ext_url)
res_div <- paste(capture.output(html_node(pg, "div#code_search_results")), collapse="")
} else {
require(xml2)
pg <- read_html(ext_url)
res_div <- as.character(html_nodes(pg, "div#code_search_results"))
}
# clean up the HTML a bit
res_div <- gsub('How are these search results\? <a href="/contact">Tell us!</a>', '', res_div)
# include a link to the results at the top of the viewer
res_div <- gsub('href="/', 'href="http://github.com/', res_div)
# build the viewer page, getting CSS from github-proper and hiding some cruft
for_view <- sprintf('<html><head><link crossorigin="anonymous" href="https://assets-cdn.github.com/assets/github/index-4157068649cead58a7dd42dc9c0f2dc5b01bcc77921bc077b357e48be23aa237.css" media="all" rel="stylesheet" /><style>body{padding:20px}</style></head><body><a href="%s">Show on GitHub</a><hr noshade size=1/>%s</body></html>', ext_url, res_div)
# this makes it show in the viewer (or browser if you're using plain R)
html_print(HTML(for_view))
}
install.packages(htmltools)
install.packages("htmltools")
install.packages("rvest")
ghelp <- function(topic, in_cran=TRUE) {
require(htmltools) # for getting HTML to the viewer
require(rvest)     # for scraping & munging HTML
# github search URL base
base_ext_url <- "https://github.com/search?utf8=%%E2%%9C%%93&q=%s+extension%%3AR"
ext_url <- sprintf(base_ext_url, topic)
# if searching with user:cran (the default) add that to the URL
if (in_cran) ext_url <- paste(ext_url, "+user%3Acran", sep="", collapse="")
# at the time of writing, "rvest" and "xml2" are undergoing some changes, so
# accommodate those of us who are on the bleeding edge of the hadleyverse
# either way, we are just extracting out the results <div> for viewing in
# the viewer pane (it works in plain ol' R, too)
if (packageVersion("rvest") < "0.2.0.9000") {
require(XML)
pg <- html(ext_url)
res_div <- paste(capture.output(html_node(pg, "div#code_search_results")), collapse="")
} else {
require(xml2)
pg <- read_html(ext_url)
res_div <- as.character(html_nodes(pg, "div#code_search_results"))
}
# clean up the HTML a bit
res_div <- gsub('How are these search results\? <a href="/contact">Tell us!</a>', '', res_div)
# include a link to the results at the top of the viewer
res_div <- gsub('href="/', 'href="http://github.com/', res_div)
# build the viewer page, getting CSS from github-proper and hiding some cruft
for_view <- sprintf('<html><head><link crossorigin="anonymous" href="https://assets-cdn.github.com/assets/github/index-4157068649cead58a7dd42dc9c0f2dc5b01bcc77921bc077b357e48be23aa237.css" media="all" rel="stylesheet" /><style>body{padding:20px}</style></head><body><a href="%s">Show on GitHub</a><hr noshade size=1/>%s</body></html>', ext_url, res_div)
# this makes it show in the viewer (or browser if you're using plain R)
html_print(HTML(for_view))
}
library("htmltools", lib.loc="/Library/Frameworks/R.framework/Versions/3.2/Resources/library")
library("rvest", lib.loc="/Library/Frameworks/R.framework/Versions/3.2/Resources/library")
ghelp <- function(topic, in_cran=TRUE) {
require(htmltools) # for getting HTML to the viewer
require(rvest)     # for scraping & munging HTML
# github search URL base
base_ext_url <- "https://github.com/search?utf8=%%E2%%9C%%93&q=%s+extension%%3AR"
ext_url <- sprintf(base_ext_url, topic)
# if searching with user:cran (the default) add that to the URL
if (in_cran) ext_url <- paste(ext_url, "+user%3Acran", sep="", collapse="")
# at the time of writing, "rvest" and "xml2" are undergoing some changes, so
# accommodate those of us who are on the bleeding edge of the hadleyverse
# either way, we are just extracting out the results <div> for viewing in
# the viewer pane (it works in plain ol' R, too)
if (packageVersion("rvest") < "0.2.0.9000") {
require(XML)
pg <- html(ext_url)
res_div <- paste(capture.output(html_node(pg, "div#code_search_results")), collapse="")
} else {
require(xml2)
pg <- read_html(ext_url)
res_div <- as.character(html_nodes(pg, "div#code_search_results"))
}
# clean up the HTML a bit
res_div <- gsub('How are these search results\? <a href="/contact">Tell us!</a>', '', res_div)
# include a link to the results at the top of the viewer
res_div <- gsub('href="/', 'href="http://github.com/', res_div)
# build the viewer page, getting CSS from github-proper and hiding some cruft
for_view <- sprintf('<html><head><link crossorigin="anonymous" href="https://assets-cdn.github.com/assets/github/index-4157068649cead58a7dd42dc9c0f2dc5b01bcc77921bc077b357e48be23aa237.css" media="all" rel="stylesheet" /><style>body{padding:20px}</style></head><body><a href="%s">Show on GitHub</a><hr noshade size=1/>%s</body></html>', ext_url, res_div)
# this makes it show in the viewer (or browser if you're using plain R)
html_print(HTML(for_view))
}
ghelp <- function(topic, in_cran=TRUE) {
require(htmltools) # for getting HTML to the viewer
require(rvest)     # for scraping & munging HTML
# github search URL base
base_ext_url <- "https://github.com/search?utf8=%%E2%%9C%%93&q=%s+extension%%3AR"
ext_url <- sprintf(base_ext_url, topic)
# if searching with user:cran (the default) add that to the URL
if (in_cran) ext_url <- paste(ext_url, "+user%3Acran", sep="", collapse="")
# at the time of writing, "rvest" and "xml2" are undergoing some changes, so
# accommodate those of us who are on the bleeding edge of the hadleyverse
# either way, we are just extracting out the results <div> for viewing in
# the viewer pane (it works in plain ol' R, too)
if (packageVersion("rvest") < "0.2.0.9000") {
require(XML)
pg <- html(ext_url)
res_div <- paste(capture.output(html_node(pg, "div#code_search_results")), collapse="")
} else {
require(xml2)
pg <- read_html(ext_url)
res_div <- as.character(html_nodes(pg, "div#code_search_results"))
}
# clean up the HTML a bit
res_div <- gsub('How are these search results\? <a href="/contact">Tell us!</a>', '', res_div)
# include a link to the results at the top of the viewer
res_div <- gsub('href="/', 'href="http://github.com/', res_div)
# build the viewer page, getting CSS from github-proper and hiding some cruft
for_view <- sprintf('<html><head><link crossorigin="anonymous" href="https://assets-cdn.github.com/assets/github/index-4157068649cead58a7dd42dc9c0f2dc5b01bcc77921bc077b357e48be23aa237.css" media="all" rel="stylesheet" /><style>body{padding:20px}</style></head><body><a href="%s">Show on GitHub</a><hr noshade size=1/>%s</body></html>', ext_url, res_div)
# this makes it show in the viewer (or browser if you're using plain R)
html_print(HTML(for_view))
}
ghelp <- function(topic, in_cran=TRUE) {
require(htmltools) # for getting HTML to the viewer
require(rvest)     # for scraping & munging HTML
# github search URL base
base_ext_url <- "https://github.com/search?utf8=%%E2%%9C%%93&q=%s+extension%%3AR"
ext_url <- sprintf(base_ext_url, topic)
# if searching with user:cran (the default) add that to the URL
if (in_cran) ext_url <- paste(ext_url, "+user%3Acran", sep="", collapse="")
# at the time of writing, "rvest" and "xml2" are undergoing some changes, so
# accommodate those of us who are on the bleeding edge of the hadleyverse
# either way, we are just extracting out the results <div> for viewing in
# the viewer pane (it works in plain ol' R, too)
if (packageVersion("rvest") < "0.2.0.9000") {
require(XML)
pg <- html(ext_url)
res_div <- paste(capture.output(html_node(pg, "div#code_search_results")), collapse="")
} else {
require(xml2)
pg <- read_html(ext_url)
res_div <- as.character(html_nodes(pg, "div#code_search_results"))
}
# clean up the HTML a bit
res_div <- gsub('How are these search results? <a href="/contact">Tell us!</a>', '', res_div)
# include a link to the results at the top of the viewer
res_div <- gsub('href="/', 'href="http://github.com/', res_div)
# build the viewer page, getting CSS from github-proper and hiding some cruft
for_view <- sprintf('<html><head><link crossorigin="anonymous" href="https://assets-cdn.github.com/assets/github/index-4157068649cead58a7dd42dc9c0f2dc5b01bcc77921bc077b357e48be23aa237.css" media="all" rel="stylesheet" /><style>body{padding:20px}</style></head><body><a href="%s">Show on GitHub</a><hr noshade size=1/>%s</body></html>', ext_url, res_div)
# this makes it show in the viewer (or browser if you're using plain R)
html_print(HTML(for_view))
}
ghelp("vapply")
ghelp("spread")
ghelp("mutate")
# Setup the data
set.seed(3)
grp.1 <- round(rlnorm(100, 6)) # With Widget
grp.2 <- round(rlnorm(100, 6)) # Original page
groups <- c(rep(1, length(grp.1)), rep(2, length(grp.2)))
data <- c(grp.1, grp.2)
diff(by(data, groups, mean))
s <- sample(groups, length(groups), FALSE)
diff(by(data, s, mean))
max.iter <- 10000
examples <- unlist(lapply(1:max.iter, function(x) {
diff(by(data, sample(groups, length(groups), FALSE), mean))
}))
test.diff <- diff(by(data, groups, mean))
par(mfrow=c(1,1))
hist(examples, col = "red", breaks = 100, main="Random Permutations", xlab="")
abline(v = test.diff, col = "black", lwd = 4)
# one-tailed test
(sum(examples > test.diff) + 1) / (max.iter + 1)
# two-tailed test
(sum(abs(examples) > abs(test.diff)) + 1) / (max.iter + 1)
# Setup the data
set.seed(3)
grp.1 <- round(rlnorm(100, 6)) # With Widget
grp.2 <- round(rlnorm(50, 6)) # Original page
# Identify groups wit a 1 or a 2 -----------------------------------------
groups <- c(rep(1, length(grp.1)), rep(2, length(grp.2)))
data <- c(grp.1, grp.2)
# Compute difference -----------------------------------------------------
diff(by(data, groups, mean))
# Compute  another difference --------------------------------------------
s <- sample(groups, length(groups), FALSE)
diff(by(data, s, mean))
# Compute lots of differences --------------------------------------------
max.iter <- 10000
examples <- unlist(lapply(1:max.iter, function(x) {
diff(by(data, sample(groups, length(groups), FALSE), mean))
}))
# Plot histogram ---------------------------------------------------------
test.diff <- diff(by(data, groups, mean))
par(mfrow=c(1,1))
hist(examples, col = "red", breaks = 100, main="Random Permutations", xlab="")
abline(v = test.diff, col = "black", lwd = 4)
# one-tailed test---------------------------------------------------------
(sum(examples > test.diff) + 1) / (max.iter + 1)
# two-tailed test---------------------------------------------------------
(sum(abs(examples) > abs(test.diff)) + 1) / (max.iter + 1)
[1] 0.1025897
# Setup the data
set.seed(3)
grp.1 <- round(rlnorm(100, 6)) # With Widget
grp.2 <- round(rlnorm(200, 6)) # Original page
# Identify groups wit a 1 or a 2 -----------------------------------------
groups <- c(rep(1, length(grp.1)), rep(2, length(grp.2)))
data <- c(grp.1, grp.2)
# Compute difference -----------------------------------------------------
diff(by(data, groups, mean))
# Compute  another difference --------------------------------------------
s <- sample(groups, length(groups), FALSE)
diff(by(data, s, mean))
# Compute lots of differences --------------------------------------------
max.iter <- 10000
examples <- unlist(lapply(1:max.iter, function(x) {
diff(by(data, sample(groups, length(groups), FALSE), mean))
}))
# Plot histogram ---------------------------------------------------------
test.diff <- diff(by(data, groups, mean))
par(mfrow=c(1,1))
hist(examples, col = "red", breaks = 100, main="Random Permutations", xlab="")
abline(v = test.diff, col = "black", lwd = 4)
# one-tailed test---------------------------------------------------------
(sum(examples > test.diff) + 1) / (max.iter + 1)
# two-tailed test---------------------------------------------------------
(sum(abs(examples) > abs(test.diff)) + 1) / (max.iter + 1)
[1] 0.1025897
install.packages("dplyr")
install.packages("devtools")
install.packages("tidyr")
# Select data entry path, change name if necessary.
#x <- read.delim('clipboard', as.is=TRUE, header = FALSE)
x <- read.delim(pipe('pbpaste'))
#x <- read.csv("vitd01.csv", header = TRUE)
xx <- sapply(x, as.numeric)
library(ggplot2)
remove_outliers <- function(x, na.rm = TRUE, ...) {
qnt <- quantile(x, probs=c(.25, .75), na.rm = na.rm, ...)
H <- 1.5 * IQR(x, na.rm = na.rm)
y <- x
y[x < (qnt[1] - H)] <- NA
y[x > (qnt[2] + H)] <- NA
y
}
par(mfrow = c(2,2))
qqnorm(xx)
qqline(xx, col = 2)
yy <- remove_outliers(xx)
qqnorm(yy)
qqline(yy, col = 2)
ww <- remove_outliers(yy)
qqnorm(ww)
qqline(ww, col = 2)
zz <- remove_outliers(ww)
qqnorm(zz)
qqline(zz, col = 2)
par(mfrow=c(1,1))
diff.out <- data.frame(xx, yy, ww, zz)
boxplot(diff.out)
zz
summary (zz)
rnge <- max(zz, na.rm = TRUE)-min(zz, na.rm =TRUE)
binsz <- rnge/25
rzz <- max(zz)
DF <- data.frame(rbind(xx,zz))
DF <- rbind(data.frame(dataset="Omitted", V1=xx),
data.frame(dataset="Retained", V1=zz))
DF$dataset <- as.factor(DF$dataset)
colnames(DF)[2] <- "V1"
ggplot(DF, aes(x=V1, fill=dataset)) +
geom_histogram(binwidth=binsz, colour="black", position="identity") +
scale_fill_manual(breaks=1:2, values=c("lightgoldenrod1","grey"))
# Select data entry path, change name if necessary.
#x <- read.delim('clipboard', as.is=TRUE, header = FALSE)
x <- read.delim(pipe('pbpaste'))
#x <- read.csv("vitd01.csv", header = TRUE)
xx <- sapply(x, as.numeric)
library(ggplot2)
remove_outliers <- function(x, na.rm = TRUE, ...) {
qnt <- quantile(x, probs=c(.25, .75), na.rm = na.rm, ...)
H <- 1.5 * IQR(x, na.rm = na.rm)
y <- x
y[x < (qnt[1] - H)] <- NA
y[x > (qnt[2] + H)] <- NA
y
}
par(mfrow = c(2,2))
qqnorm(xx)
qqline(xx, col = 2)
yy <- remove_outliers(xx)
qqnorm(yy)
qqline(yy, col = 2)
ww <- remove_outliers(yy)
qqnorm(ww)
qqline(ww, col = 2)
zz <- remove_outliers(ww)
qqnorm(zz)
qqline(zz, col = 2)
par(mfrow=c(1,1))
diff.out <- data.frame(xx, yy, ww, zz)
boxplot(diff.out)
zz
summary (zz)
rnge <- max(zz, na.rm = TRUE)-min(zz, na.rm =TRUE)
binsz <- rnge/25
rzz <- max(zz)
DF <- data.frame(rbind(xx,zz))
DF <- rbind(data.frame(dataset="Omitted", V1=xx),
data.frame(dataset="Retained", V1=zz))
DF$dataset <- as.factor(DF$dataset)
colnames(DF)[2] <- "V1"
ggplot(DF, aes(x=V1, fill=dataset)) +
geom_histogram(binwidth=binsz, colour="black", position="identity") +
scale_fill_manual(breaks=1:2, values=c("lightgoldenrod1","grey"))
?rnorm
ip <- as.data.frame(installed.packages()[,c(1,3:4)])
rownames(ip) <- NULL
ip <- ip[is.na(ip$Priority),1:2,drop=FALSE]
print(ip, row.names=FALSE)
write.csv(ip, "installed_packages.csv")
install.packages("car")
library(car)
A <- c(2, 4, 6, 8, 10, 12, 14, 28)
B <- c(3, 5, 5, 7.5, 10.5,12.2, 13.5, 26)
dataEllipse(A, B,
levels = 0.95,
fill = FALSE,
xlim = c(0,10),
ylim = c(0,30),
pch = 19,
col = c("#00000080", "orange"),
center.pch = FALSE)
library(car)
A <- c(2, 4, 6, 8, 10, 12, 14)
B <- c(3, 5, 5, 7.5, 10.5,12.2, 13.5)
dataEllipse(A, B,
levels = 0.95,
fill = FALSE,
xlim = c(0,10),
ylim = c(0,30),
pch = 19,
col = c("#00000080", "orange"),
center.pch = FALSE)
library(car)
A <- c(2, 4, 6, 8, 10, 11, 11, 11, 12, 10, 12, 14)
B <- c(3, 5, 5, 7.5, 10.5,11.1, 10.9, 11.3, 11.8, 9.9, 12.2, 13.5)
dataEllipse(A, B,
levels = 0.95,
fill = FALSE,
xlim = c(0,10),
ylim = c(0,30),
pch = 19,
col = c("#00000080", "orange"),
center.pch = FALSE)
dataEllipse(A, B,
levels = 0.95,
fill = FALSE,
xlim = c(0,30),
ylim = c(0,30),
pch = 19,
col = c("#00000080", "orange"),
center.pch = FALSE)
library(car)
A <- c(2, 4, 6, 8, 10, 11, 11, 11, 12, 10, 12, 14)
B <- c(3, 5, 5, 7.5, 10.5,11.1, 10.9, 11.3, 11.8, 9.9, 12.2, 13.5)
dataEllipse(A, B,
levels = 0.95,
fill = FALSE,
xlim = c(0,30),
ylim = c(0,30),
pch = 19,
col = c("#00000080", "orange"),
center.pch = FALSE)
dataEllipse(A, B,
levels = 0.9,
fill = FALSE,
xlim = c(0,30),
ylim = c(0,30),
pch = 19,
col = c("#00000080", "orange"),
center.pch = FALSE)
dataEllipse(A, B,
levels = 0.99,
fill = FALSE,
xlim = c(0,30),
ylim = c(0,30),
pch = 19,
col = c("#00000080", "orange"),
center.pch = FALSE)
library("dts.quality", lib.loc="~/Library/R/3.2/library")
install.packages("ggplot2")
install.packages("shiny")
library(shiny)
# Example usage:
# lmGadget(mtcars, "wt", "mpg")
#
# Returns a list with two items:
#   $data: Data with excluded rows removed.
#   $model: lm (model) object.
lmGadget <- function(data, xvar, yvar) {
library(miniUI)
library(ggplot2)
ui <- miniPage(
gadgetTitleBar("Interactive lm"),
miniContentPanel(
fillRow(flex = c(NA, 1),
fillCol(width = "100px",
selectInput("degree", "Polynomial degree", c(1, 2, 3, 4))
),
plotOutput("plot1",
height = "100%",
click = "plot1_click",
brush = brushOpts(
id = "plot1_brush"
)
)
)
),
miniButtonBlock(
actionButton("exclude_toggle", "Toggle points"),
actionButton("exclude_reset", "Reset")
)
)
server <- function(input, output) {
# For storing which rows have been excluded
vals <- reactiveValues(
keeprows = rep(TRUE, nrow(data))
)
output$plot1 <- renderPlot({
req(input$degree)
formula <- as.formula(paste0("y ~ poly(x, degree = ", input$degree, ")"))
# Plot the kept and excluded points as two separate data sets
keep    <- data[ vals$keeprows, , drop = FALSE]
exclude <- data[!vals$keeprows, , drop = FALSE]
ggplot(keep, aes_string(xvar, yvar)) + geom_point() +
geom_smooth(method = lm, formula = formula, fullrange = TRUE, color = "gray50") +
geom_point(data = exclude, fill = NA, color = "black", alpha = 0.25) +
coord_cartesian(xlim = range(data[[xvar]]), ylim = range(data[[yvar]])) +
theme_bw(base_size = 14)
})
# Toggle points that are clicked
observeEvent(input$plot1_click, {
res <- nearPoints(data, input$plot1_click, allRows = TRUE)
vals$keeprows <- xor(vals$keeprows, res$selected_)
})
# Toggle points that are brushed, when button is clicked
observeEvent(input$exclude_toggle, {
res <- brushedPoints(data, input$plot1_brush, allRows = TRUE)
vals$keeprows <- xor(vals$keeprows, res$selected_)
})
# Reset all points
observeEvent(input$exclude_reset, {
vals$keeprows <- rep(TRUE, nrow(data))
})
# Handle the Done button being pressed.
observeEvent(input$done, {
# Replace x and y in the formula with the values in xvar and yvar
formula <- as.formula(paste0(yvar, " ~ poly(", xvar, ", degree = ", input$degree, ")"))
keep_data <- data[vals$keeprows, , drop = FALSE]
# Return the kept points.
stopApp(
list(
data = keep_data,
model = lm(formula, keep_data)
)
)
})
}
runGadget(ui, server)
}
lmGadget(mtcars, "wt", "mpg")
install.packages("miniUI")
lmGadget(mtcars, "wt", "mpg")
install.packages("devtools")
# Create the data frame
col1 <- runif (12^5, 0, 2)
col2 <- rnorm (12^5, 0, 2)
col3 <- rpois (12^5, 3)
col4 <- rchisq (12^5, 2)
df <- data.frame (col1, col2, col3, col4)
output <- ifelse ((df$col1 + df$col2 + df$col3 + df$col4) > 4, "greater_than_4", "lesser_than_4")
df$output <- output
?ifelse
for (i in 1:nrow(df)) { # for every row
if ((df[i, "col1"] + df[i, "col2"] + df[i, "col3"] + df[i, "col4"]) > 4) { # check if > 4
df[i, 5] <- "greater_than_4" # assign 5th column
} else {
df[i, 5] <- "lesser_than_4" # assign 5th column
}
}
output <- character (nrow(df)) # initialize output vector
output <- ifelse ((df$col1 + df$col2 + df$col3 + df$col4) > 4, "greater_than_4", "lesser_than_4")
df$output <- output
install.packages("tidyr")
install.packages("robust")
setwd("~/Documents/GitHub/Stats_Toolbox")
library(ProjectTemplate)
create.project(minimal = TRUE)
